#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('Geofeelingsapp:server');
var http = require('http');
var config = require('../config/config');

/**
 * Get port from environment and store in Express.
 */

app.set('port', config.PORT);

/**
 * Connect to mongoDB service.
 */

var DBService = require("../data/connectDBService.js");
var connectDB = DBService(config.MONGODBURL, require('mongoose'));

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);

/**
 * Listen on provided port, on all network interfaces.
 */

//server.listen(port);
server.listen(config.PORT, function () {
    console.log('Express server listening on port :' + app.get('port'));
});
server.on('error', onError);
server.on('listening', onListening);

var sockets = io.listen(server);
require('../sockets.js')(io);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
